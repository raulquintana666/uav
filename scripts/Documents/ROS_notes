	WHEN FIRST STARTING ROS

When starting ROS, run this cmmand on every new shell opeend to have access to ROS commands

$ source /opt/ros/kinetic/setup.bash


Before continuing source your new setup.*sh file: 

$ source ./devel/setup.bash

//////////////////////////

	FILE SYSTEM NAVIGATION IN ROS

http://wiki.ros.org/ROS/Tutorials/NavigatingTheFilesystem

	KEY POINTS
ROSPACK

rospack allows you to get information about packages. In this tutorial, we are only going to cover the find option, which returns the path to package

$ rospack find [package_name]

ROSCD

roscd is part of the rosbash suite. It allows you to change directory (cd) directly to a package or a stack

$ roscd [locationname[/subdir]]


ROSLS

rosls is part of the rosbash suite. It allows you to ls directly in a package by name rather than by absolute path.

$ rosls [locationname[/subdir]]

TAB COMPLETION

It can get tedious to type out an entire package name. In the previous example, roscpp_tutorials is a fairly long name. Luckily, some ROS tools support TAB completion.

////////////////////////////////////////////////////////////////////////

UNDERSTANDING ROS NODES
http://wiki.ros.org/ROS/Tutorials/UnderstandingNodes

Nodes: A node is an executable that uses ROS to communicate with other nodes.

Messages: ROS data type used when subscribing or publishing to a topic.

Topics: Nodes can publish messages to a topic as well as subscribe to a topic to receive messages.

Master: Name service for ROS (i.e. helps nodes find each other)

rosout: ROS equivalent of stdout/stderr

roscore: Master + rosout + parameter server (parameter server will be introduced later)

Nodes

A node really isn't much more than an executable file within a ROS package. ROS nodes use a ROS client library to communicate with other nodes. Nodes can publish or subscribe to a Topic. Nodes can also provide or use a Service. 

Client Libraries

ROS client libraries allow nodes written in different programming languages to communicate:

    rospy = python client library
    roscpp = c++ client library 

roscore

roscore is the first thing you should run when using ROS. 

$ roscore

Review

roscore = ros+core : master (provides name service for ROS) + rosout (stdout/stderr) + parameter server (parameter server will be introduced later)
rosnode = ros+node : ROS tool to get information about a node.
rosrun = ros+run : runs a node from a given package. 

/////////////////////////////////////////////////////////////////////////////

Understanding ROS Topics
http://wiki.ros.org/ROS/Tutorials/UnderstandingTopics

Let's start by making sure that we have roscore running, in a new terminal:

$ roscore

For this tutorial we will also use turtlesim. Please run in a new terminal:

$ rosrun turtlesim turtlesim_node

We'll also need something to drive the turtle around with. Please run in a new terminal:

$ rosrun turtlesim turtle_teleop_key

ROS Topics

The turtlesim_node and the turtle_teleop_key node are communicating with each other over a ROS Topic. turtle_teleop_key is publishing the key strokes on a topic, while turtlesim subscribes to the same topic to receive the key strokes. Let's use rqt_graph which shows the nodes and topics currently running. 


///////////////////////////////////////////////////////////////////////////

ROS serial notes

- arduino is on /dev/ttyACM1
- use lsusb to see ports

//////////////////////////////////////////////////////////////////////////

RANDOME ROS NOTES

- to make a file exexutable use this
	chmod +x quad_controller.py












 
